
<% content_for :title do %>
  Create a Serious game
<% end %>

<% content_for :notmain do %>
  True
<% end %>

 <div class="mainText container">
      <br/>
      <% flash.each do |name, msg| -%>
           <%= content_tag(:div, msg, class: "alert alert-#{name}") %>
      <% end -%>

      <h2>Create</h2>
      <p>In order to use the engine, you need to send us your configuration file (if you haven't already, we suggest you read the <a href="documention.html">documentation page</a> to learn how to write it). You can write your configuration file using the following editor.</p>

      <form class="form-horizontal" role="form" action="/serious_games" method="POST" id="sendConfigFile">
        <!-- Hidding the file upload for now. TODO(Yaelle) - Implement the file upload button
        <div class="form-group">
          <label for="inputConfigFileUpload" class="col-lg-3 control-label">Upload your configuration file:</label>
          <div class="col-lg-6">
            <input type="file" placeholder="ConfigFileUpload" id="inputConfigFileUpload" name="ConfigFileUpload" class="form-control" />
          </div>
        </div>
        -->
        <div class="form-group">
          <div id="editor" class="editor">Serious-game
  /* Describe your serious game here giving 
   SGname : a name (alphanumerical String)
   SGdeveloper : your id (int)
   SGdesc : a description (optional String)
   SGageRange : an age range (optional, int-int)
   SGlanguage : a language (optional, String, use the ISO 639-1 code)
   SGcountry : a country (optional, String, use the ISO 3166-1 code) 
   SGgenre : a genre (optional, String)
   SGsubject : a subject (optional, String)
   SGpublic : public option (optional, Boolean) */
End

Player
  /* Describe a typical player's characteristics using the following model: "characteristic : type"
   Types can be Char, String, Text, Int, Float, Bool */
End

Learning-outcomes
  /* Define a learning outcome giving:
   an id (alphanumerical String)
   a description (optional String)
   starting value (optional integer, default is 0) */
End

Feedback-messages
  /* Define your feedback messages to be triggered giving:
   an id (alphanumerical String)
   a message (String)
   a type (optional, positive, negative, neutral, badge or hint) */
End

Evidence-model
  /* Define your meaningful actions and the consequences for them
   action-name(type1 param1, type2 param2...)
     id-learningOutcome -> (optional if only one learning outcome) +/- nbPoints
       valueParam1, valueParam2 ... OR 'others'
     'When' section to define feedback triggered */
End

Feedback-model
  /* inactivity or outcome feedback */
End</div>
          <div style="display:none">
          
            <textarea placeholder="ConfigFile" id="inputConfigFile" name="ConfigFile" class="form-control" rows="30">Serious-game
  /* Describe your serious game here giving 
   SGname : a name (alphanumerical String)
   SGdeveloper : your id (int)
   SGdesc : a description (optional String)
   SGageRange : an age range (optional, int-int)
   SGlanguage : a language (optional, String, use the ISO 639-1 code)
   SGcountry : a country (optional, String, use the ISO 3166-1 code) 
   SGgenre : a genre (optional, String)
   SGsubject : a subject (optional, String)
   SGpublic : public option (optional, Boolean) */
End

Player
  /* Describe a typical player's characteristics using the following model: "characteristic : type"
   Types can be Char, String, Text, Int, Float, Bool */
End

Learning-outcomes
  /* Define a learning outcome giving:
   an id (alphanumerical String)
   a description (optional String)
   starting value (optional integer, default is 0) */
End

Feedback-messages
  /* Define your feedback messages to be triggered giving:
   an id (alphanumerical String)
   a message (String)
   a type (optional, positive, negative, neutral, badge or hint) */
End

Evidence-model
  /* Define your meaningful actions and the consequences for them
   action-name(type1 param1, type2 param2...)
     id-learningOutcome -> (optional if only one learning outcome) +/- nbPoints
       valueParam1, valueParam2 ... OR 'others'
     'When' section to define feedback triggered */
End

Feedback-model
  /* inactivity or outcome feedback */
End</textarea>
          </div>
        </div>
        <div align="center">
          <button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-share"></span> Submit file</button>
        </div>

      </form>

      <br/>
      <p><span class="glyphicon glyphicon-warning-sign"></span> Note that once you send the file, the game will be created and it's assessment cannot be changed, if you wish to develop a new version of your game, or change the assessment logic, you will need to create a new game in our database.</p>


<!--<%= render 'form' %>

<%= link_to 'Back', serious_games_path %>-->
    </div>

<script>
    var editor = ace.edit("editor");
    var textarea = $('textarea[name="ConfigFile"]').hide();

    editor.setTheme("ace/theme/monokai");
    editor.getSession().setMode("ace/mode/engage");
    editor.getSession().setValue(textarea.val());
    editor.getSession().on('change', function(){
      textarea.val(editor.getSession().getValue());
    });

    $(document).ready(function () {
          $("#checkDSL").click(function (event) {
              $.ajax({
                  type: "PUT",
                  url: "http://docker:8080/seriousgame/check",
                  data: textarea.val(),
                  contentType: "text/plain; charset=utf-8",
                  dataType: "text",
                  success: function (msg) {
                      alert(msg);
                  },
                  error: AjaxFailed
              });
          });
      });
      function AjaxSucceeded(result) {
          alert('s');
          //alert(result.d);
      }
      function AjaxFailed(result) {
          alert(result.status + ' ' + result.statusText);
      } 
  
</script>